#!/usr/bin/env python3

#
# Just run this in a terminal or put it into a service script and it'll run as
# a daemon.  The first time it executes, it'll place a symlink at
# ${HOME}/.wallpaper, and tell GNOME to use that as the wallpaper.
#
# By default, it'll look for files in ${HOME}/Pictures/Wallpaper, but you can
# tell it to use a different directory by passing a path in as the first
# argument:
#
#   $ wallpaperator /path/to/my/wallpapers
#

import os
import subprocess
import sys
import random
import time

source = "{}/Pictures/Wallpaper".format(os.getenv("HOME"))
target = "{}/.wallpaper".format(os.getenv("HOME"))
walls = []

if len(sys.argv) == 2:
    source = sys.argv[1]


class Wallpaper(object):

    SLEEP_TIME = 60  # Seconds

    SOURCE = "{}/Pictures/Wallpaper".format(os.environ.get("HOME"))
    TARGET = "{}/.wallpaper".format(os.environ.get("HOME"))

    def __init__(self):
        
        self.walls = []
        self.populate()

        if not os.path.exists(self.TARGET):
            print(
                "This is the first time running wallpaperator, so we're creating "
                "a symlink at {} and telling GNOME to use it for "
                "wallpaper.".format(target)
            )
            self.set();
            subprocess.Popen("gsettings set {} picture-uri 'file://{}'".format(
                "org.gnome.desktop.background", target), shell=True)
            time.sleep(self.SLEEP_TIME)

    def populate(self):
        self.walls = []
        for f in os.listdir(self.SOURCE):
            if f.split(".")[-1].lower() in ("png", "jpg", "gif"):
                self.walls.append(os.path.join(self.SOURCE, f))
        random.shuffle(self.walls)

    def set(self):
        wall = self.walls.pop()
        print(wall)
        subprocess.Popen("ln -sf '{}' {}".format(wall, target), shell=True)

    def loop(self):
        try:
            while True:
                if not self.walls:
                    self.populate()
                self.set()
                time.sleep(self.SLEEP_TIME)
        except KeyboardInterrupt:
            print("Exiting")


if __name__ == "__main__":
    Wallpaper().loop()

