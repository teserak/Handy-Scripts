#! /bin/bash

function setprompt {

  ##
  ## Set some colours for easy reference.
  ##

  local        black="\[\033[0;30m\]"
  local        white="\[\033[1;37m\]"
  local         blue="\[\033[0;34m\]"
  local        green="\[\033[0;32m\]"
  local         cyan="\[\033[0;36m\]"
  local          red="\[\033[0;31m\]"
  local       yellow="\[\033[1;33m\]"
  local       purple="\[\033[0;35m\]"
  local        brown="\[\033[0;33m\]"
  local         grey="\[\033[1;30m\]"
  local   light_grey="\[\033[0;37m\]"
  local   light_blue="\[\033[1;34m\]"
  local  light_green="\[\033[1;32m\]"
  local   light_cyan="\[\033[1;36m\]"
  local    light_red="\[\033[1;31m\]"
  local light_purple="\[\033[1;35m\]"
  local    no_colour="\[\033[0m\]"


  # set date colour based on $PROMPT_HOST_COLOUR or use a default

  local host_colour=${grey}
  if [[ "${PROMPT_HOST_COLOUR}" != "" ]]; then
    host_colour=${PROMPT_HOST_COLOUR}
  fi

  local load_high=4
  if [[ "${PROMPT_LOAD_HIGH}" != "" ]]; then
    load_high=${PROMPT_LOAD_HIGH}
  fi

  local load_low=2
  if [[ "${PROMPT_LOAD_LOW}" != "" ]]; then
    load_low=${PROMPT_LOAD_LOW}
  fi

  ##
  ## Get the current system load (1 min, 5 min, 15 min)
  ##

  local load_1=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\1/')
  local load_5=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\2/')
  local load_15=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\3/')

  local load_1_int=$(echo ${load_1} | sed -e 's/^\([0-9]\+\).*/\1/')
  local load_5_int=$(echo ${load_5} | sed -e 's/^\([0-9]\+\).*/\1/')
  local load_15_int=$(echo ${load_15} | sed -e 's/^\([0-9]\+\).*/\1/')

  if [ ${load_1_int} -lt ${load_low} ]; then
    load_1c="${light_green}${load_1}${no_colour}"
  elif [ ${load_1_int} -lt ${load_high} ]; then
    load_1c="${yellow}${load_1}${no_colour}"
  else
    load_1c="${light_red}${load_1}${no_colour}"
  fi

  if [ ${load_5_int} -lt ${load_low} ]; then
    load_5c="${light_green}${load_5}${no_colour}"
  elif [ ${load_5_int} -lt ${load_high} ]; then
    load_5c="${yellow}${load_5}${no_colour}"
  else
    load_5c="${light_red}${load_5}${no_colour}"
  fi

  if [ ${load_15_int} -lt ${load_low} ]; then
    load_15c="${light_green}${load_15}${no_colour}"
  elif [ ${load_15_int} -lt ${load_high} ]; then
    load_15c="${yellow}${load_15}${no_colour}"
  else
    load_15c="${light_red}${load_15}${no_colour}"
  fi

  
  ##
  ## Check on the partition usage.
  ## By default we always capture the capacity of root (/), but you can add
  ## more to the list of mounts checked by declaring PROMPT_DF and assigning it
  ## a value in the following format:
  ##
  ##   <letter>:<path>
  ##
  ## For example:
  ##
  ## PROMPT_DF="x:/path/something;y:/path/to/something/else"
  ##

  local df=$(df -P /| awk '$6 ~ "^/$" { print $5 }' | sed -e 's/\(.\+\)./\1/')

  if [[ ${df} -lt 70 ]]; then
    df_all="${light_green}r:${df}%${no_colour}"
  elif [[ ${df} -lt 90 ]]; then
    df_all="${yellow}r:${df}%${no_colour}"
  else
    df_all="${light_red}r:${df}%${no_colour}"
  fi

  if [[ "${PROMPT_DF}" != "" ]]; then

    local mounts=""; IFS=';'; mounts=(${PROMPT_DF}); unset IFS;

    for name in ${mounts}; do

      local letter=$(echo "${name}" | sed -e 's/:.*//')
      local path=$(echo "${name}" | sed -e 's/.*://')
      local df_tmp=$(df -P ${path} | awk '$6 ~ "^'${path}'$" { print $5 }' | sed -e 's/\(.\+\)./\1/')

      if [[ ${df_tmp} -lt 70 ]]; then
        df_tmp="${light_green}${letter}:${df_tmp}%${no_colour}"
      elif [[ ${df_tmp} -lt 90 ]]; then
        df_tmp="${yellow}${letter}:${df_tmp}%${no_colour}"
      else
        df_tmp="${light_red}${letter}:${df_tmp}%${no_colour}"
      fi
      
      df_all="${df_all} ${df_tmp}"

    done
  fi


  ##
  ## check network connections
  ##

  local connections=$(netstat -nut | egrep '^tcp|udp' | wc -l)

  if [ ${connections} -lt 25 ]; then
    connections="${light_green}+${connections}${no_colour}"
  elif [ ${connections} -lt 50 ]; then
    connections="${yellow}+${connections}${no_colour}"
  else
    connections="${light_red}+${connections}${no_colour}"
  fi


  ##
  ## Battery capacity
  ##

  local battery=""

  if [[ -e /sys/class/power_supply/BAT0/capacity ]]; then

    battery=$(</sys/class/power_supply/BAT0/capacity)

    if [[ ${battery} -lt 25 ]]; then
      battery="${light_red}${battery}${no_colour}"
    elif [[ ${battery} -lt 50 ]]; then
      battery="${yellow}${battery}${no_colour}"
    else
      battery="${light_green}${battery}${no_colour}"
    fi

  fi

  ##
  ## Git
  ##

  local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [[ ${branch} ]]; then
    commit=$(git rev-parse --short HEAD)
    branch="${white}[${green}${branch}:${commit}${white}]${no_colour}"
  fi

  ##
  ## Python
  ##

  local virtualenv=${VIRTUAL_ENV}
  if [[ ${virtualenv} ]]; then
    virtualenv=$(echo ${virtualenv} | sed -E 's#^.*virtualenvs/(.*?)-[^-]*#\1#')
    virtualenv=" ${blue}${virtualenv}${no_colour}"
  fi

  ##
  ## Set the username string.
  ##

  if [[ $UID -eq 0 ]]; then
    local user="${white}[${light_red}\u${white}@${host_colour}\h${white}]"
  else
    local user="${white}[${host_colour}\u@\h${white}]"
  fi

  ##
  ## Not everyone has a battery
  ##

  local battery_line=""
  if [[ "${battery}" != "" ]]; then
    battery_line="${white}[${no_colour}${battery}${white}]${no_colour}"
  fi
  
  ##
  ## Account for a variable number of df choices
  ##
  local df_line=""
  for df in ${df_all}; do
    df_line="${df_line}${white}[${no_colour}${df}${white}]${no_colour}"
  done
  

PS1="\[\e]0;\a\]${user}\
${white}[${no_colour}${load_1c}|${load_5c}|${load_15c}${white}]${no_colour}\
${df_line}\
${white}[${no_colour}${connections}${white}]${no_colour}\
${battery_line}\
${white}[${cyan}\w$white]${branch}${no_colour}\n\
${white}(${cyan}`date '+%F %T'`${virtualenv}${white}) \\$ ${no_colour}"

}

export PROMPT_COMMAND=setprompt
