#! /bin/bash

function setprompt {

  ##
  ## Set some colours for easy reference.
  ##

  local        BLACK="\[\033[0;30m\]"
  local        WHITE="\[\033[1;37m\]"
  local         BLUE="\[\033[0;34m\]"
  local        GREEN="\[\033[0;32m\]"
  local         CYAN="\[\033[0;36m\]"
  local          RED="\[\033[0;31m\]"
  local       YELLOW="\[\033[1;33m\]"
  local       PURPLE="\[\033[0;35m\]"
  local        BROWN="\[\033[0;33m\]"
  local         GREY="\[\033[1;30m\]"
  local   LIGHT_GREY="\[\033[0;37m\]"
  local   LIGHT_BLUE="\[\033[1;34m\]"
  local  LIGHT_GREEN="\[\033[1;32m\]"
  local   LIGHT_CYAN="\[\033[1;36m\]"
  local    LIGHT_RED="\[\033[1;31m\]"
  local LIGHT_PURPLE="\[\033[1;35m\]"
  local    NO_COLOUR="\[\033[0m\]"


  # set date colour based on $PROMPT_HOST_COLOUR or use a default

  local HOST_COLOUR=${GREY}
  if [[ "${PROMPT_HOST_COLOUR}" != "" ]]; then
    HOST_COLOUR=${PROMPT_HOST_COLOUR}
  fi

  ##
  ## Get the current system load (1 min, 5 min, 15 min)
  ##

  local load_1=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\1/')
  local load_5=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\2/')
  local load_15=$(uptime | sed -e 's/^.*: \([0-9.]\+\), \([0-9.]\+\), \([0-9.]\+\).*$/\3/')

  local load_1_int=$(echo ${load_1} | sed -e 's/^\([0-9]\+\).*/\1/')
  local load_5_int=$(echo ${load_5} | sed -e 's/^\([0-9]\+\).*/\1/')
  local load_15_int=$(echo ${load_15} | sed -e 's/^\([0-9]\+\).*/\1/')

  if [ ${load_1_int} -lt 2 ]; then
    load_1c="${LIGHT_GREEN}${load_1}${NO_COLOUR}"
  elif [ ${load_1_int} -lt 4 ]; then
    load_1c="${YELLOW}${load_1}${NO_COLOUR}"
  else
    load_1c="${LIGHT_RED}${load_1}${NO_COLOUR}"
  fi

  if [ ${load_5_int} -lt 2 ]; then
    load_5c="${LIGHT_GREEN}${load_5}${NO_COLOUR}"
  elif [ ${load_5_int} -lt 4 ]; then
    load_5c="${YELLOW}${load_5}${NO_COLOUR}"
  else
    load_5c="${LIGHT_RED}${load_5}${NO_COLOUR}"
  fi

  if [ ${load_15_int} -lt 2 ]; then
    load_15c="${LIGHT_GREEN}${load_15}${NO_COLOUR}"
  elif [ ${load_15_int} -lt 4 ]; then
    load_15c="${YELLOW}${load_15}${NO_COLOUR}"
  else
    load_15c="${LIGHT_RED}${load_15}${NO_COLOUR}"
  fi

  
  ##
  ## Check on the partition usage.
  ## By default we always capture the capacity of root (/), but you can add
  ## more to the list of mounts checked by declaring PROMPT_DF and assigning it
  ## a value in the following format:
  ##
  ##   <letter>:<path>
  ##
  ## For example:
  ##
  ## PROMPT_DF="x:/path/something;y:/path/to/something/else"
  ##

  local df=$(df -P /| awk '$6 ~ "^/$" { print $5 }' | sed -e 's/\(.\+\)./\1/')

  if [[ ${df} -lt 70 ]]; then
    df_all="${LIGHT_GREEN}r:${df}%${NO_COLOUR}"
  elif [[ ${df} -lt 90 ]]; then
    df_all="${YELLOW}r:${df}%${NO_COLOUR}"
  else
    df_all="${LIGHT_RED}r:${df}%${NO_COLOUR}"
  fi

  if [[ "${PROMPT_DF}" != "" ]]; then

    local mounts=""; IFS=';'; mounts=(${PROMPT_DF}); unset IFS;

    for name in ${mounts}; do

      local letter=$(echo "${name}" | sed -e 's/:.*//')
      local path=$(echo "${name}" | sed -e 's/.*://')
      local df_tmp=$(df -P ${path} | awk '$6 ~ "^'${path}'$" { print $5 }' | sed -e 's/\(.\+\)./\1/')

      if [[ ${df_tmp} -lt 70 ]]; then
        df_tmp="${LIGHT_GREEN}${letter}:${df_tmp}%${NO_COLOUR}"
      elif [[ ${df_tmp} -lt 90 ]]; then
        df_tmp="${YELLOW}${letter}:${df_tmp}%${NO_COLOUR}"
      else
        df_tmp="${LIGHT_RED}${letter}:${df_tmp}%${NO_COLOUR}"
      fi
      
      df_all="${df_all} ${df_tmp}"

    done
  fi


  ##
  ## check network connections
  ##

  local connections=$(netstat -nut | egrep '^tcp|udp' | wc -l)

  if [ ${connections} -lt 25 ]; then
    connections="${LIGHT_GREEN}+${connections}${NO_COLOUR}"
  elif [ ${connections} -lt 50 ]; then
    connections="${YELLOW}+${connections}${NO_COLOUR}"
  else
    connections="${LIGHT_RED}+${connections}${NO_COLOUR}"
  fi


  ##
  ## Battery capacity
  ##

  local battery=""

  if [[ -e /sys/class/power_supply/BAT0/capacity ]]; then

    battery=$(</sys/class/power_supply/BAT0/capacity)

    if [[ ${battery} -lt 25 ]]; then
      battery="${LIGHT_RED}${battery}${NO_COLOUR}"
    elif [[ ${battery} -lt 50 ]]; then
      battery="${YELLOW}${battery}${NO_COLOUR}"
    else
      battery="${LIGHT_GREEN}${battery}${NO_COLOUR}"
    fi

  fi

  ##
  ## Git
  ##

  local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [[ ${branch} ]]; then
    commit=$(git rev-parse --short HEAD)
    branch="${WHITE}[${GREEN}${branch}:${commit}${WHITE}]${NO_COLOUR}"
  fi

  ##
  ## Python
  ##

  local virtualenv=${VIRTUAL_ENV}
  if [[ ${virtualenv} ]]; then
    virtualenv=$(echo ${virtualenv} | sed -e 's#^.*virtualenvs/##')
    virtualenv=" ${BLUE}${virtualenv}${NO_COLOUR}"
  fi

  ##
  ## Set the username string.
  ##

  if [[ $UID -eq 0 ]]; then
    local user="${WHITE}[${LIGHT_RED}\u${WHITE}@${HOST_COLOUR}\h${WHITE}]"
  else
    local user="${WHITE}[${HOST_COLOUR}\u@\h${WHITE}]"
  fi

  ##
  ## Not everyone has a battery
  ##

  local battery_line=""
  if [[ "${battery}" != "" ]]; then
    battery_line="${WHITE}[${NO_COLOUR}${battery}${WHITE}]${NO_COLOUR}"
  fi
  
  ##
  ## Account for a variable number of df choices
  ##
  local df_line=""
  for df in ${df_all}; do
    df_line="${df_line}${WHITE}[${NO_COLOUR}${df}${WHITE}]${NO_COLOUR}"
  done
  

PS1="\[\e]0;\a\]${user}\
${WHITE}[${NO_COLOUR}${load_1c}|${load_5c}|${load_15c}${WHITE}]${NO_COLOUR}\
${df_line}\
${WHITE}[${NO_COLOUR}${connections}${WHITE}]${NO_COLOUR}\
${battery_line}\
${WHITE}[${CYAN}\w$WHITE]${branch}${NO_COLOUR}\n\
${WHITE}(${CYAN}`date '+%F %T'`${virtualenv}${WHITE}) \\$ ${NO_COLOUR}"

}

export PROMPT_COMMAND=setprompt
